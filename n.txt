1. Implement a Node js program which deletes festival records from 'festivals' array using "deleteFestivals" API.
Declare festival array in Nodejs profile with predefined festivals as follows.

const express = require('express');
const app = express();
const port = 3000;
let festivals = [
    {
        "id": "1",
        "festivname": "Sankranti",
        "Month": "Jan"
    },
    {
        "id": "2",
        "festivname": "Dewali",
        "Month": "Nov"
    }
];
//get the data
app.get("/", (req, res) => {
    res.send(festivals);
})
app.get("/deletefestival/:id", (req, res) => {
})
const deleteData = app.delete('/deletefestival/:id', (req, res) => {
    //getting the id from URL
    const getId = req.params.id;
    festivals = festivals.filter(x => { return x.id!=getId })
    res.send("Data deleted sucessfully")
})
app.listen(port, () => {
    console.log(`The app is runnig on ${port}`);
});
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2. Implement Node js program which will expose "putReels" API to insert reels into MongoDB documents. Reels should have below format

const express = require('express');
const app = express();
const port = 4000;
const mongoose = require('mongoose');

//get the current date
var currentDate = new Date();
var strDate = currentDate.getFullYear() + '-' + (currentDate.getMonth()+1) + '-' + currentDate.getDate();

//connecting to the database
mongoose.set("strictQuery", false);
mongoose.connect('mongodb://localhost:27017/PutReels').then(() => {
    console.log("Connected to database")
}).catch((err) => {
    console.log(err)
})

//export the models
console.log(__dirname)
const PutReel = require('./model/PutReels');

app.get("/",(req,res) => {
    res.send("Data is getting");
})

app.get("/putreels",async (req,res) => {
    try {
        const putreels = await PutReel.find();
        res.json(putreels)
    }
    catch(err) {
        res.send(err)
    }
});

app.post("/",(req,res) => {
    const putreels = new PutReel({
        id:"1",
        filename:"dance.mp4",
        creator:"iamABC",
        date:strDate
    })
    res.send(putreels.save());
    console.log(putreels)
})

//listen to the port
app.listen(3000,() => {
    console.log(`The app is running at ${port}`);
})
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3. Create node js file and expose/implement 'getStudent' API. This API will connect to the Student table and return a student list.

const express = require('express');
const app = express();
const port = 3000;
const mongoose = require('mongoose');

mongoose.set("strictQuery",false);
mongoose.connect('mongodb://localhost:27017/student').then(() => {
    console.log("connected to the database")
}).catch((err) => {
    console.log(err)
})

//import the model
const Student = require('./model/Student');

app.get("/",async (req,res) => {
    const getStudent = await Student.find();
    res.send(getStudent)
})

app.post("/",(req,res) => {
    const student = new Student({
        rollNo:"1",
        name:"Adam",
        clgName:"hoggward College",
        course:"Computer Science"
    })

    res.send(student.save())
})

app.listen(port,() => {
    console.log(`The port is running at ${port4. Implement a Node js program which will search and return all festivals of a particular month. Take month as input parameter}`);
})
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4. Implement a Node js program which will search and return all festivals of a particular month. Take month as input parameter.
Declare festival array in Node js profile with predefined festivals as follows.
Festivals will have below declaration.

const express = require('express');
const app = express();
const bodyParser = require('body-parser');
const port = 3000;

//getting the data from client
app.use(bodyParser.urlencoded({extended:true}));

let festivals = [
    {
        "id": "1",
        "festivname": "Gudi Padva",
        "Month": "Apr"
    },
    {
        "id": "2",
        "festivname": "Diwali",
        "Month": "Nov"
    }];

let updatedFestival = [];

//rendering the index.html
app.get("/", (req, res) => {
    res.sendFile(__dirname + "/index.html");
})

app.get("/getFestivals",(req,res) => {
    res.send(updatedFestival)
})

app.post("/", (req, res) => {
    var festivalName = req.body.festival;
    updatedFestival = festivals.filter(data => {
        return data.Month == festivalName
    })   
    res.redirect("/getFestivals") 
})

app.listen(port, () => {
    console.log(`The app is listening at ${port}`);
})
---------------------------------------------------------------------------------------------------------------------------------------------------------
5. Implement Nodejs program which inserts new festivals into 'festivals' array using "putFestivals".
Declare festival array in Node js profile with predefined festivals as follows.
Festivals will have below declaration.

const express = require('express');
const app = express();
const bodyParser = require('body-parser');
const port = 3000;

const Festival = require("./model/Festival");

let festivals = [
    {
        "id": "1",
        "festivname": "Gudi Padva",
        "Month": "Apr"
    },
    {
        "id": "2",
        "festivname": "Dewali",
        "Month": "Nov"
    }
];


//rendering the index.html
app.get("/", (req, res) => {
    res.send(festivals)
})


app.post("/putReels", (req, res) => {
    const festival = {
        id:"3",
        festivname:"ABC",
        Month:"Sept"
    }
    festivals.push(festival);
    res.send("Data is added")
})


app.listen(port, () => {
    console.log(`The app is listening at ${port}`);
})